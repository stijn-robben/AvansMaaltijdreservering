{
	"info": {
		"_postman_id": "74aecb98-258a-41a0-8337-acf4e8e2e1a9",
		"name": "3 - Cleanup Workflow",
		"description": "üßπ RESET EVERYTHING: Cleans up all test data created in Collections 1 and 2. Cancels student reservations, deletes test packages, removes test users (both employees and students), and resets the system to a clean state for future testing. Run this after testing Collections 1 & 2.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26200282"
	},
	"item": [
		{
			"name": "Authentication for Cleanup",
			"item": [
				{
					"name": "Login Employee for Cleanup Operations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Employee cleanup login', function () {",
									"    if (pm.response.code === 200) {",
									"        const response = pm.response.json();",
									"        pm.globals.set('cleanup_employee_token', response.token);",
									"        console.log('Employee authenticated for cleanup operations');",
									"    } else {",
									"        console.log('Employee login failed - may not exist');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"employee@test.com\",\n  \"password\": \"Test123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/account/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Adult Student for Cleanup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Adult student cleanup login', function () {",
									"    if (pm.response.code === 200) {",
									"        const response = pm.response.json();",
									"        pm.globals.set('cleanup_adult_token', response.token);",
									"        console.log('‚úÖ Adult student authenticated for cleanup');",
									"    } else {",
									"        console.log('‚ö†Ô∏è  Adult student login failed - may not exist');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"adult.student.123@avans.nl\",\n  \"password\": \"Test123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/account/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Minor Student for Cleanup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Minor student cleanup login', function () {",
									"    if (pm.response.code === 200) {",
									"        const response = pm.response.json();",
									"        pm.globals.set('cleanup_minor_token', response.token);",
									"        console.log('‚úÖ Minor student authenticated for cleanup');",
									"    } else {",
									"        console.log('‚ö†Ô∏è  Minor student login failed - may not exist');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"minor.student.456@avans.nl\",\n  \"password\": \"Test123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/account/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"account",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üßπ Reservation Cleanup",
			"item": [
				{
					"name": "Get Adult Student Reservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Adult student reservations retrieved', function () {",
									"    if (pm.response.code === 200) {",
									"        const reservations = pm.response.json();",
									"        console.log(`üìã Adult student has ${reservations.length} reservation(s) to cancel`);",
									"        ",
									"        // Store reservation package IDs for cancellation",
									"        if (reservations.length > 0) {",
									"            reservations.forEach((reservation, index) => {",
									"                pm.globals.set(`adult_reservation_${index}_package_id`, reservation.id);",
									"                console.log(`   - Reservation ${index + 1}: Package ${reservation.id} - ${reservation.name}`);",
									"            });",
									"            pm.globals.set('adult_reservations_count', reservations.length);",
									"        } else {",
									"            pm.globals.set('adult_reservations_count', 0);",
									"            console.log('   ‚úÖ No adult reservations to cancel');",
									"        }",
									"    } else {",
									"        console.log('‚ö†Ô∏è  Could not retrieve adult reservations');",
									"        pm.globals.set('adult_reservations_count', 0);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cleanup_adult_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/reservations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel Adult Student Reservations (Dynamic)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the first reservation package ID to cancel",
									"const packageId = pm.globals.get('adult_reservation_0_package_id');",
									"if (packageId) {",
									"    pm.request.url.path[2] = packageId;",
									"    console.log('Attempting to cancel adult reservation for package: ' + packageId);",
									"} else {",
									"    // Set a dummy ID that will result in 404 - that's fine",
									"    pm.request.url.path[2] = '999';",
									"    console.log('No adult reservations found to cancel');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Adult reservation cleanup attempt', function () {",
									"    if (pm.response.code === 204) {",
									"        console.log('‚úÖ Adult student reservation cancelled successfully');",
									"    } else if (pm.response.code === 404) {",
									"        console.log('‚ÑπÔ∏è  Adult reservation not found or already cancelled');",
									"    } else if (pm.response.code === 400) {",
									"        console.log('‚ö†Ô∏è  Cannot cancel reservation - may belong to different student');",
									"    } else if (pm.response.code === 401 || pm.response.code === 403) {",
									"        console.log('üîí Authentication required for cancellation');",
									"    }",
									"    pm.expect([204, 400, 401, 403, 404]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cleanup_adult_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/reservations/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Minor Student Reservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Minor student reservations retrieved', function () {",
									"    if (pm.response.code === 200) {",
									"        const reservations = pm.response.json();",
									"        console.log(`üìã Minor student has ${reservations.length} reservation(s) to cancel`);",
									"        ",
									"        // Store reservation package IDs for cancellation",
									"        if (reservations.length > 0) {",
									"            reservations.forEach((reservation, index) => {",
									"                pm.globals.set(`minor_reservation_${index}_package_id`, reservation.id);",
									"                console.log(`   - Reservation ${index + 1}: Package ${reservation.id} - ${reservation.name}`);",
									"            });",
									"            pm.globals.set('minor_reservations_count', reservations.length);",
									"        } else {",
									"            pm.globals.set('minor_reservations_count', 0);",
									"            console.log('   ‚úÖ No minor reservations to cancel');",
									"        }",
									"    } else {",
									"        console.log('‚ö†Ô∏è  Could not retrieve minor reservations');",
									"        pm.globals.set('minor_reservations_count', 0);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cleanup_minor_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/reservations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel Minor Student Reservations (Dynamic)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the first reservation package ID to cancel",
									"const packageId = pm.globals.get('minor_reservation_0_package_id');",
									"if (packageId) {",
									"    pm.request.url.path[2] = packageId;",
									"    console.log('Attempting to cancel minor reservation for package: ' + packageId);",
									"} else {",
									"    // Set a dummy ID that will result in 404 - that's fine",
									"    pm.request.url.path[2] = '999';",
									"    console.log('No minor reservations found to cancel');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Minor reservation cleanup attempt', function () {",
									"    if (pm.response.code === 204) {",
									"        console.log('‚úÖ Minor student reservation cancelled successfully');",
									"    } else if (pm.response.code === 404) {",
									"        console.log('‚ÑπÔ∏è  Minor reservation not found or already cancelled');",
									"    } else if (pm.response.code === 400) {",
									"        console.log('‚ö†Ô∏è  Cannot cancel reservation - may belong to different student');",
									"    } else if (pm.response.code === 401 || pm.response.code === 403) {",
									"        console.log('üîí Authentication required for cancellation');",
									"    }",
									"    pm.expect([204, 400, 401, 403, 404]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cleanup_minor_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/reservations/3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify All Reservations Cancelled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Reservation cleanup status', function () {",
									"    if (pm.response.code === 200) {",
									"        const reservations = pm.response.json();",
									"        console.log('Remaining reservations: ' + reservations.length);",
									"    } else {",
									"        console.log('Cannot verify reservations without authentication');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/reservations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Package Cleanup",
			"item": [
				{
					"name": "Delete Test Regular Package",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const packageId = pm.globals.get('created_package_id') || pm.globals.get('regular_package_for_reservation') || '1';",
									"pm.request.url.path[2] = packageId;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test package deletion attempt', function () {",
									"    if (pm.response.code === 204) {",
									"        console.log('Test package deleted successfully');",
									"    } else if (pm.response.code === 400) {",
									"        console.log('Cannot delete package - may have active reservations');",
									"    } else if (pm.response.code === 401 || pm.response.code === 403) {",
									"        console.log('Authentication required for deletion');",
									"    } else if (pm.response.code === 404) {",
									"        console.log('Package not found - may not exist');",
									"    }",
									"    pm.expect([204, 400, 401, 403, 404]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cleanup_employee_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/packages/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Test 18+ Package",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const packageId = pm.globals.get('adult_package_id') || pm.globals.get('adult_package_for_reservation') || '2';",
									"pm.request.url.path[2] = packageId;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('18+ package deletion attempt', function () {",
									"    if (pm.response.code === 204) {",
									"        console.log('18+ package deleted successfully');",
									"    } else if (pm.response.code === 400) {",
									"        console.log('Cannot delete 18+ package - may have active reservations');",
									"    } else if (pm.response.code === 401 || pm.response.code === 403) {",
									"        console.log('Authentication required for deletion');",
									"    } else if (pm.response.code === 404) {",
									"        console.log('18+ package not found - may not exist');",
									"    }",
									"    pm.expect([204, 400, 401, 403, 404]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cleanup_employee_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/packages/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Package Cleanup Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Package cleanup verification', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const packages = pm.response.json();",
									"    console.log('Remaining packages after cleanup: ' + packages.length);",
									"    ",
									"    const testPackages = packages.filter(p => p.name && (p.name.includes('Test') || p.name.includes('Evening Wine')));",
									"    if (testPackages.length === 0) {",
									"        console.log('All test packages successfully cleaned up');",
									"    } else {",
									"        console.log('Some test packages remain: ' + testPackages.length);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/packages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üßπ User Account Status",
			"item": [
				{
					"name": "User Account Cleanup Notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('');",
									"console.log('üìã USER ACCOUNT CLEANUP STATUS');",
									"console.log('===============================');",
									"console.log('‚úÖ Reservations: Cancelled (packages released)');",
									"console.log('‚úÖ Test Packages: Deleted');",
									"console.log('‚ÑπÔ∏è  User Accounts: Remain in database');",
									"console.log('');",
									"console.log('NOTE: User accounts cannot be deleted via API');",
									"console.log('This is normal - Identity system preserves user data');",
									"console.log('Students/Employees can be reused in next test cycle');",
									"console.log('');",
									"console.log('If complete user cleanup needed, run:');",
									"console.log('- ClearAllUsers.sql (manual database script)');",
									"console.log('===============================');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/packages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Global Variables Cleanup",
			"item": [
				{
					"name": "Clear All Test Variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Global variables cleaned', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    ",
									"    const varsToClean = [",
									"        // Authentication tokens",
									"        'employee_token', 'employee_id',",
									"        'adult_token', 'adult_student_id', 'minor_token', 'minor_student_id',",
									"        'cleanup_employee_token', 'cleanup_adult_token', 'cleanup_minor_token',",
									"        // Package and product IDs",
									"        'created_package_id', 'adult_package_id', 'regular_package_id', 'regular_product_id', 'alcohol_product_id',",
									"        // Legacy variables",
									"        'adult_student_token', 'minor_student_token',",
									"        'adult_student_record_id', 'minor_student_record_id',",
									"        'regular_package_for_reservation', 'adult_package_for_reservation',",
									"        'adult_reservation_id', 'adult_18plus_reservation_id'",
									"    ];",
									"    ",
									"    let clearedCount = 0;",
									"    varsToClean.forEach(varName => {",
									"        if (pm.globals.has(varName)) {",
									"            pm.globals.unset(varName);",
									"            clearedCount++;",
									"        }",
									"    });",
									"    ",
									"    console.log('Cleared ' + clearedCount + ' global variables');",
									"    console.log('Global variables reset to clean state');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/packages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup Completion Status",
			"item": [
				{
					"name": "Final System State Verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cleanup completed successfully', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const packages = pm.response.json();",
									"    ",
									"    console.log('');",
									"    console.log('CLEANUP WORKFLOW COMPLETE');",
									"    console.log('=========================');",
									"    console.log('Final System State:');",
									"    console.log('- Packages remaining: ' + packages.length);",
									"    console.log('- Test reservations: Cancelled');",
									"    console.log('- Test students: Removed');",
									"    console.log('- Global variables: Cleared');",
									"    console.log('');",
									"    console.log('System State: RESTORED TO ORIGINAL');",
									"    console.log('Ready for next test cycle');",
									"    console.log('=========================');",
									"    ",
									"    // Verify only original seeded packages remain",
									"    const originalPackages = packages.filter(p => ",
									"        p.name && (",
									"            p.name.includes('Lunch Special') || ",
									"            p.name.includes('Evening Package') || ",
									"            p.name.includes('Pasta Special') ||",
									"            p.name.includes('Wrap')",
									"        )",
									"    );",
									"    console.log('Original seeded packages preserved: ' + originalPackages.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/packages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Manual Cleanup Instructions",
			"item": [
				{
					"name": "Complete Database Reset Guide",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('');",
									"console.log('MANUAL DATABASE CLEANUP');",
									"console.log('========================');",
									"console.log('If automated cleanup was insufficient, run:');",
									"console.log('');",
									"console.log('1. ClearAllUsers.sql - Removes all test users');",
									"console.log('2. DatabaseSeed.sql - Restores original seeded data');",
									"console.log('');",
									"console.log('SQL Commands for complete reset:');",
									"console.log('-- Clear Identity Database');",
									"console.log('DELETE FROM AspNetUserRoles;');",
									"console.log('DELETE FROM AspNetUsers;');",
									"console.log('');",
									"console.log('-- Clear Main Database user data');",
									"console.log('UPDATE Packages SET ReservedByStudentId = NULL;');",
									"console.log('DELETE FROM Students;');",
									"console.log('');",
									"console.log('-- Optional: Reset to original seeded packages only');",
									"console.log('DELETE FROM Packages WHERE Id NOT IN (1,2,3,4);');",
									"console.log('========================');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/packages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5080",
			"type": "string"
		}
	]
}