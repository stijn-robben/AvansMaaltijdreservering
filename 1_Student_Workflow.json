{
	"info": {
		"_postman_id": "cfe190bd-de66-4aa5-8657-f28b7ca425ab",
		"name": "1 - Student Workflow",
		"description": "Complete student workflow: authentication, dashboard overview, package browsing with filtering, reservations, and comprehensive business rule testing. Tests ALL student user stories: US_01, US_04, US_05, US_06, US_07, US_08. RUN THIS FIRST to create reservations.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26200282"
	},
	"item": [
		{
			"name": "🔐 Authentication",
			"item": [
				{
					"name": "Register Adult Student (Born 1995)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Adult student registration successful', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('successfully');",
									"    pm.globals.set('adult_student_id', response.studentId);",
									"    console.log('✅ Adult student registered - eligible for 18+ packages');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"adult.student.123@avans.nl\",\n  \"password\": \"Test123!\",\n  \"role\": \"Student\",\n  \"studentNumber\": \"STUA123\",\n  \"name\": \"Alex Adult\",\n  \"dateOfBirth\": \"1995-05-15T00:00:00\",\n  \"studyCity\": 0,\n  \"phoneNumber\": \"+31612345678\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/account/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"account",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Minor Student (Born 2008)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Minor student registration successful', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('successfully');",
									"    pm.globals.set('minor_student_id', response.studentId);",
									"    console.log('✅ Minor student registered - restricted from 18+ packages');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"minor.student.456@avans.nl\",\n  \"password\": \"Test123!\",\n  \"role\": \"Student\",\n  \"studentNumber\": \"STUM456\",\n  \"name\": \"Jordan Junior\",\n  \"dateOfBirth\": \"2008-08-20T00:00:00\",\n  \"studyCity\": 0,\n  \"phoneNumber\": \"+31687654321\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/account/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"account",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adult Student Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Adult student login successful', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const response = pm.response.json();",
									"    pm.globals.set('adult_token', response.token);",
									"    pm.expect(response.roles).to.include('Student');",
									"    console.log('✅ Adult student authenticated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"adult.student.123@avans.nl\",\n  \"password\": \"Test123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/account/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Minor Student Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Minor student login successful', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const response = pm.response.json();",
									"    pm.globals.set('minor_token', response.token);",
									"    pm.expect(response.roles).to.include('Student');",
									"    console.log('✅ Minor student authenticated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"minor.student.456@avans.nl\",\n  \"password\": \"Test123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/account/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"account",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "📊 Student Dashboard (US_01)",
			"item": [
				{
					"name": "Adult Student Dashboard Overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Dashboard loaded successfully', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const dashboard = pm.response.json();",
									"    ",
									"    pm.expect(dashboard).to.have.property('student');",
									"    pm.expect(dashboard).to.have.property('availablePackages');",
									"    pm.expect(dashboard).to.have.property('myReservations');",
									"    pm.expect(dashboard).to.have.property('stats');",
									"    ",
									"    console.log(`📊 Dashboard Stats:`);",
									"    console.log(`   - Total packages: ${dashboard.stats.totalAvailablePackages}`);",
									"    console.log(`   - In my city (Breda): ${dashboard.stats.availablePackagesInMyCity}`);",
									"    console.log(`   - I can reserve: ${dashboard.stats.packagesICanReserve}`);",
									"    console.log(`   - My reservations: ${dashboard.stats.myActiveReservations}`);",
									"    console.log(`   - Student age: ${dashboard.student.age} (Adult: ${dashboard.student.isAdult})`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adult_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/students/dashboard",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"students",
								"dashboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "Minor Student Dashboard Overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Dashboard loaded successfully for minor', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const dashboard = pm.response.json();",
									"    ",
									"    console.log(`📊 Minor Student Dashboard:`);",
									"    console.log(`   - Student age: ${dashboard.student.age} (Adult: ${dashboard.student.isAdult})`);",
									"    console.log(`   - Packages I can reserve: ${dashboard.stats.packagesICanReserve} (should exclude 18+)`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{minor_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/students/dashboard",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"students",
								"dashboard"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "📦 Package Browsing & Filtering (US_06, US_08)",
			"item": [
				{
					"name": "Browse All Available Packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Packages retrieved successfully', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const packages = pm.response.json();",
									"    ",
									"    console.log(`📦 Found ${packages.length} available packages`);",
									"    ",
									"    // Store package IDs for reservation testing",
									"    const regularPackage = packages.find(p => !p.is18Plus && !p.isReserved);",
									"    const adultPackage = packages.find(p => p.is18Plus && !p.isReserved);",
									"    ",
									"    if (regularPackage) {",
									"        pm.globals.set('regular_package_id', regularPackage.id);",
									"        console.log(`   📋 Regular package found: ID ${regularPackage.id} - ${regularPackage.name}`);",
									"    }",
									"    ",
									"    if (adultPackage) {",
									"        pm.globals.set('adult_package_id', adultPackage.id);",
									"        console.log(`   🔞 Adult package found: ID ${adultPackage.id} - ${adultPackage.name}`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/packages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by City - Breda (US_08)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('City filtering works', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const packages = pm.response.json();",
									"    ",
									"    console.log(`🏙️ Packages in Breda: ${packages.length}`);",
									"    packages.forEach(p => {",
									"        pm.expect(p.city).to.eql(0); // Breda = 0",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/packages?city=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							],
							"query": [
								{
									"key": "city",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by Meal Type - Lunch (US_08)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Meal type filtering works', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const packages = pm.response.json();",
									"    ",
									"    console.log(`🍽️ Lunch packages: ${packages.length}`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/packages?mealType=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							],
							"query": [
								{
									"key": "mealType",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Package Details with Products (US_06)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const packageId = pm.globals.get('regular_package_id') || '1';",
									"pm.request.url.path[2] = packageId;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Package details with disclaimer shown (US_06)', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const details = pm.response.json();",
									"    ",
									"    pm.expect(details).to.have.property('package');",
									"    pm.expect(details).to.have.property('productDisclaimer');",
									"    pm.expect(details).to.have.property('reservationInfo');",
									"    ",
									"    console.log('📦 Package Details:');",
									"    console.log(`   Name: ${details.package.name}`);",
									"    console.log(`   Price: €${details.package.price}`);",
									"    console.log(`   Products: ${details.package.products.length} items`);",
									"    console.log(`   ⚠️  Disclaimer: ${details.productDisclaimer.substring(0, 50)}...`);",
									"    console.log(`   📍 Location: ${details.reservationInfo.location}`);",
									"    console.log(`   🕐 Pickup: ${details.reservationInfo.pickupWindow}`);",
									"    console.log(`   🔞 18+: ${details.reservationInfo.requiresAge18Plus}`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/packages/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "🛒 Reservations & Business Rules (US_04, US_05, US_07)",
			"item": [
				{
					"name": "Adult: Reserve Package 1 (Tomorrow)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Adult can reserve regular package', function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"    console.log('✅ Adult reserved Package 1 (Tomorrow)');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adult_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/reservations/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adult: Try Package 4 Same Day (US_05 - Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Adult blocked from second package same day (US_05)', function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"    const error = pm.response.json();",
									"    console.log('📅 Adult correctly blocked from Package 4 (same day as Package 1)');",
									"    console.log(`   ${error.message}`);",
									"    pm.expect(error.message).to.include('per day');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adult_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/reservations/4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Minor: Try 18+ Package 7 (US_04 - Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Minor blocked from 18+ packages (US_04)', function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"    const error = pm.response.json();",
									"    console.log('🚫 Minor correctly blocked from 18+ Package 7');",
									"    console.log(`   ${error.message}`);",
									"    pm.expect(error.message).to.include('18+');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{minor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/reservations/7",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adult: Reserve 18+ Package 2 (US_04 - Should Work)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Adult can reserve 18+ package (US_04)', function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"    console.log('✅ Adult successfully reserved 18+ Package 2 (Day After)');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adult_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/reservations/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Minor: Reserve Package 3 (Day After)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Minor can reserve regular package', function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"    console.log('✅ Minor reserved Package 3 (Day After)');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{minor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/reservations/3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Minor: Try Package 5 Same Day (US_05 - Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Minor blocked from second package same day (US_05)', function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"    const error = pm.response.json();",
									"    console.log('📅 Minor correctly blocked from Package 5 (same day as Package 3)');",
									"    console.log(`   ${error.message}`);",
									"    pm.expect(error.message).to.include('per day');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{minor_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/reservations/5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Duplicate Reservation (US_07 - Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Duplicate reservation prevented (US_07)', function () {",
									"    pm.expect([400, 409]).to.include(pm.response.code);",
									"    const error = pm.response.json();",
									"    console.log('🚫 Duplicate prevented: Adult trying Package 1 again');",
									"    console.log(`   ${error.message}`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adult_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/reservations/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "📋 My Reservations (US_01)",
			"item": [
				{
					"name": "View Adult Student Reservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Adult student reservations retrieved', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const reservations = pm.response.json();",
									"    console.log(`📋 Adult student has ${reservations.length} active reservation(s)`);",
									"    ",
									"    reservations.forEach((reservation, i) => {",
									"        console.log(`   ${i+1}. ${reservation.name} - €${reservation.price} - ${reservation.pickupTime}`);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adult_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/reservations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Minor Student Reservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Minor student reservations retrieved', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const reservations = pm.response.json();",
									"    pm.expect(reservations).to.be.an('array');",
									"    console.log(`📋 Minor student has ${reservations.length} active reservation(s)`);",
									"    ",
									"    if (reservations.length > 0) {",
									"        console.log('✅ Minor student successfully made and can view reservations');",
									"    } else {",
									"        console.log('ℹ️  Minor student has no active reservations (previous reservation attempts may have failed)');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{minor_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/reservations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "🔍 Eligibility Checking",
			"item": [
				{
					"name": "Check Adult Eligibility for Available Package",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Adult eligible for available package', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const result = pm.response.json();",
									"    ",
									"    pm.expect(result).to.have.property('isEligible');",
									"    pm.expect(result).to.have.property('isAvailable');",
									"    ",
									"    console.log('🔍 Adult eligibility for Package 8 (available):');",
									"    console.log(`   Eligible: ${result.isEligible}`);",
									"    console.log(`   Available: ${result.isAvailable}`);",
									"    ",
									"    // Adult should be eligible (18+, not blocked) but canReserve should be false",
									"    pm.expect(result.isEligible).to.be.true; // Adult is eligible (basic requirements)",
									"    pm.expect(result.canReserve).to.be.false; // But cannot reserve (US_05 - already has reservation same day)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adult_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/reservations/eligibility/8",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations",
								"eligibility",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Minor Eligibility for 18+ Package",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const packageId = pm.globals.get('adult_package_id') || '2';",
									"pm.request.url.path[3] = packageId;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Minor correctly ineligible for 18+ package', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const result = pm.response.json();",
									"    ",
									"    console.log('🔍 Minor eligibility for 18+ package:');",
									"    console.log(`   Eligible: ${result.isEligible} (should be false)`);",
									"    console.log(`   Can Reserve: ${result.canReserve} (should be false)`);",
									"    ",
									"    pm.expect(result.isEligible).to.be.false;",
									"    pm.expect(result.canReserve).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{minor_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/reservations/eligibility/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations",
								"eligibility",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "🚫 Authorization Testing",
			"item": [
				{
					"name": "Test Unauthorized Package Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Students cannot create packages', function () {",
									"    pm.expect([401, 403]).to.include(pm.response.code);",
									"    console.log('🚫 Correctly blocked student from package creation');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adult_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Unauthorized Package\",\n  \"city\": 0,\n  \"canteenLocation\": 0,\n  \"pickupTime\": \"2025-08-29T12:00:00\",\n  \"latestPickupTime\": \"2025-08-29T13:00:00\",\n  \"price\": 5.95,\n  \"mealType\": 4,\n  \"productIds\": [1]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/packages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Reservation Without Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Reservations require authentication', function () {",
									"    pm.expect([401, 403]).to.include(pm.response.code);",
									"    console.log('🚫 Correctly blocked unauthenticated reservation attempt');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/reservations/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5080",
			"type": "string"
		}
	]
}