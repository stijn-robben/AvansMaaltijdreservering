@model AvansMaaltijdreservering.WebApp.ViewModels.Employees.EditPackageViewModel
@using AvansMaaltijdreservering.Core.Domain.Enums
@{
    ViewData["Title"] = "Edit Package";
}

<div class="mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-9 col-xl-8">
            <!-- Edit Package Form Card -->
            <div class="package-details-card">
                <!-- Header -->
                <h1 class="labrada-font" style="color: var(--color-primary-dark); margin-bottom: var(--spacing-xl);">Edit Package</h1>
                <form asp-action="EditPackage" method="post">
        <input type="hidden" asp-for="Id" />
        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>
        
                    <!-- Name, price and category -->
                    <div class="row mb-2">
                        <div class="col-12">
                            <h3 class="labrada-font">Name, price and category</h3>
                        </div>
                    </div>
                    
                    <!-- Package Name - Full Width -->
                    <div class="row mb-2">
                        <div class="col-12">
                            <div style="margin-bottom: var(--spacing-lg);">
                                <input asp-for="Name" class="register-round-input" placeholder="Package name (e.g., Fresh Bread Selection)" />
                                <span asp-validation-for="Name" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Price and Category - 50/50 Split -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div style="margin-bottom: var(--spacing-xl);">
                                <input asp-for="PriceString" class="register-round-input" placeholder="Price in euros (e.g. 2,50)" inputmode="decimal" />
                                <span asp-validation-for="PriceString" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div style="margin-bottom: var(--spacing-xl);">
                                <select asp-for="MealType" class="register-round-input" id="mealTypeSelect" required>
                                    <option value="">Select meal type</option>
                                    <option value="@((int)MealType.Bread)" selected="@(Model.MealType == MealType.Bread)">üçû Bread & Bakery</option>
                                    <option value="@((int)MealType.WarmEveningMeal)" id="warmMealOption" selected="@(Model.MealType == MealType.WarmEveningMeal)">üçΩÔ∏è Warm Evening Meal</option>
                                    <option value="@((int)MealType.Drink)" selected="@(Model.MealType == MealType.Drink)">ü•§ Beverages</option>
                                    <option value="@((int)MealType.Snack)" selected="@(Model.MealType == MealType.Snack)">üçø Snacks</option>
                                    <option value="@((int)MealType.Lunch)" selected="@(Model.MealType == MealType.Lunch)">ü•™ Lunch</option>
                                    <option value="@((int)MealType.Breakfast)" selected="@(Model.MealType == MealType.Breakfast)">ü•ê Breakfast</option>
                                </select>
                                <small class="form-text text-muted" id="warmMealInfo" style="display: none;"></small>
                                <span asp-validation-for="MealType" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

        <!-- Date and time with Tooltip -->
        <div class="row mb-2">
            <div class="col-12">
                <h3 class="labrada-font d-inline-flex align-items-center">
                    Date and time
                    <span class="pickup-schedule-info-icon-container">
                        <i class="bi bi-info-circle pickup-schedule-info-icon"></i>
                        <div class="pickup-schedule-tooltip">
                            Max 2 days ahead
                        </div>
                    </span>
                </h3>
            </div>
        </div>
        
        <!-- Auto-populated from employee's canteen -->
        <input asp-for="City" type="hidden" />
        <input asp-for="CanteenLocation" type="hidden" />
        
        <div class="row mb-4">
            <div class="col-md-6">
                <div style="margin-bottom: var(--spacing-xl);">
                    <div class="custom-calendar-wrapper">
                        <button type="button" class="calendar-toggle" id="pickupCalendarToggle">
                            <span id="selectedPickupDatetime">Select pickup start time</span>
                            <i class="bi bi-calendar3"></i>
                        </button>
                        <div class="custom-calendar" id="pickupCustomCalendar">
                            <div class="calendar-header">
                                <div class="calendar-nav-group">
                                    <button type="button" class="calendar-nav" id="pickupPrevMonth">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                </div>
                                <span class="calendar-month" id="pickupCurrentMonth">January 2024</span>
                                <div class="calendar-nav-group">
                                    <button type="button" class="calendar-nav" id="pickupNextMonth">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="calendar-days">
                                <div class="calendar-day-header">Sun</div>
                                <div class="calendar-day-header">Mon</div>
                                <div class="calendar-day-header">Tue</div>
                                <div class="calendar-day-header">Wed</div>
                                <div class="calendar-day-header">Thu</div>
                                <div class="calendar-day-header">Fri</div>
                                <div class="calendar-day-header">Sat</div>
                            </div>
                            <div class="calendar-grid" id="pickupCalendarGrid">
                                <!-- Days will be generated by JavaScript -->
                            </div>
                            <div class="time-section">
                                <label>Time</label>
                                <div class="time-controls">
                                    <div class="time-input-group">
                                        <button type="button" class="time-btn time-up" data-target="pickup-hour">
                                            <i class="bi bi-chevron-up"></i>
                                        </button>
                                        <input type="text" id="pickupHourInput" class="time-input" value="12" readonly>
                                        <button type="button" class="time-btn time-down" data-target="pickup-hour">
                                            <i class="bi bi-chevron-down"></i>
                                        </button>
                                    </div>
                                    <span class="time-separator">:</span>
                                    <div class="time-input-group">
                                        <button type="button" class="time-btn time-up" data-target="pickup-minute">
                                            <i class="bi bi-chevron-up"></i>
                                        </button>
                                        <input type="text" id="pickupMinuteInput" class="time-input" value="00" readonly>
                                        <button type="button" class="time-btn time-down" data-target="pickup-minute">
                                            <i class="bi bi-chevron-down"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <input asp-for="PickupTime" type="hidden" id="pickupTimeInput" />
                    </div>
                    <span asp-validation-for="PickupTime" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-6">
                <div style="margin-bottom: var(--spacing-xl);">
                    <div class="custom-calendar-wrapper">
                        <button type="button" class="calendar-toggle" id="latestCalendarToggle">
                            <span id="selectedLatestDatetime">Select latest pickup time</span>
                            <i class="bi bi-calendar3"></i>
                        </button>
                        <div class="custom-calendar" id="latestCustomCalendar">
                            <div class="calendar-header">
                                <div class="calendar-nav-group">
                                    <button type="button" class="calendar-nav" id="latestPrevMonth">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                </div>
                                <span class="calendar-month" id="latestCurrentMonth">January 2024</span>
                                <div class="calendar-nav-group">
                                    <button type="button" class="calendar-nav" id="latestNextMonth">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="calendar-days">
                                <div class="calendar-day-header">Sun</div>
                                <div class="calendar-day-header">Mon</div>
                                <div class="calendar-day-header">Tue</div>
                                <div class="calendar-day-header">Wed</div>
                                <div class="calendar-day-header">Thu</div>
                                <div class="calendar-day-header">Fri</div>
                                <div class="calendar-day-header">Sat</div>
                            </div>
                            <div class="calendar-grid" id="latestCalendarGrid">
                                <!-- Days will be generated by JavaScript -->
                            </div>
                            <div class="time-section">
                                <label>Time</label>
                                <div class="time-controls">
                                    <div class="time-input-group">
                                        <button type="button" class="time-btn time-up" data-target="latest-hour">
                                            <i class="bi bi-chevron-up"></i>
                                        </button>
                                        <input type="text" id="latestHourInput" class="time-input" value="14" readonly>
                                        <button type="button" class="time-btn time-down" data-target="latest-hour">
                                            <i class="bi bi-chevron-down"></i>
                                        </button>
                                    </div>
                                    <span class="time-separator">:</span>
                                    <div class="time-input-group">
                                        <button type="button" class="time-btn time-up" data-target="latest-minute">
                                            <i class="bi bi-chevron-up"></i>
                                        </button>
                                        <input type="text" id="latestMinuteInput" class="time-input" value="00" readonly>
                                        <button type="button" class="time-btn time-down" data-target="latest-minute">
                                            <i class="bi bi-chevron-down"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <input asp-for="LatestPickupTime" type="hidden" id="latestPickupTimeInput" />
                    </div>
                    <span asp-validation-for="LatestPickupTime" class="text-danger"></span>
                </div>
            </div>
        </div>


        <!-- Products -->
        <div class="row mb-4">
            <div class="col-12">
                <h3 class="labrada-font">Products</h3>
            </div>
        </div>
        
        @if (Model.AvailableProducts.Any())
        {
            <div class="products-gallery mb-4">
                @foreach (var product in Model.AvailableProducts)
                {
                    <div class="product-item @(Model.SelectedProductIds.Contains(product.Id) ? "selected" : "")" data-product-id="@product.Id">
                        <input type="checkbox" name="SelectedProductIds" value="@product.Id" id="product_@product.Id" class="product-checkbox" style="display: none;" checked="@(Model.SelectedProductIds.Contains(product.Id))" />
                        <div class="product-image-container" onclick="toggleProduct(@product.Id)">
                            @if (!string.IsNullOrEmpty(product.PhotoUrl))
                            {
                                <img src="@product.PhotoUrl" alt="@product.Name" class="product-image" />
                            }
                            else
                            {
                                <div class="product-placeholder">
                                    <span>üçΩÔ∏è</span>
                                </div>
                            }
                            @if (product.ContainsAlcohol)
                            {
                                <div class="product-18-badge">18+</div>
                            }
                        </div>
                    </div>
                }
            </div>
            
            <p class="text-muted small mb-4">
                <i class="bi bi-info-circle"></i> Alcoholic products automatically mark packages as 18+ only.
            </p>
        }
        else
        {
            <div class="alert alert-warning mb-4">
                No products available. Contact your system administrator to add products first.
            </div>
        }


                    <!-- Action Buttons -->
                    <div class="row">
                        <div class="col-12 text-end">
                            <a asp-action="Dashboard" class="meal-filter-btn me-3">
                                Cancel
                            </a>
                            <button type="submit" class="meal-filter-btn active">
                                Update Package
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        // Product selection functionality
        function toggleProduct(productId) {
            const productItem = document.querySelector(`[data-product-id="${productId}"]`);
            const checkbox = document.getElementById(`product_${productId}`);
            
            checkbox.checked = !checkbox.checked;
            
            if (checkbox.checked) {
                productItem.classList.add('selected');
            } else {
                productItem.classList.remove('selected');
            }
        }

        // Simple price field - convert dots to commas
        document.addEventListener('DOMContentLoaded', function() {
            const priceInput = document.querySelector('input[name="PriceString"]');
            if (priceInput) {
                // Replace dots with commas when typing
                priceInput.addEventListener('keypress', function(e) {
                    if (e.key === '.') {
                        e.preventDefault();
                        const start = e.target.selectionStart;
                        const value = e.target.value;
                        e.target.value = value.substring(0, start) + ',' + value.substring(start);
                        e.target.setSelectionRange(start + 1, start + 1);
                    }
                });
                
                // Replace dots with commas when pasting
                priceInput.addEventListener('paste', function(e) {
                    setTimeout(() => {
                        if (e.target.value.includes('.')) {
                            e.target.value = e.target.value.replace(/\./g, ',');
                        }
                    }, 10);
                });
            }
        });

        // Warm meal location validation
        document.addEventListener('DOMContentLoaded', function() {
            const mealTypeSelect = document.getElementById('mealTypeSelect');
            const warmMealInfo = document.getElementById('warmMealInfo');
            const canteenLocation = '@(Model.EmployeeCanteen?.Location.ToString() ?? "")';
            
            // Set initial color based on current selection
            if (mealTypeSelect.value && mealTypeSelect.value !== '') {
                mealTypeSelect.style.color = 'var(--color-primary-dark)';
            }

            function checkWarmMealRestriction() {
                const selectedMealType = mealTypeSelect.value;
                
                // Warm evening meal = 1, restricted locations: LD Building, HA Building, Tilburg Building
                if (selectedMealType === '1') {
                    if (canteenLocation.includes('LD_BUILDING') || canteenLocation.includes('HA_BUILDING') || canteenLocation.includes('TILBURG')) {
                        warmMealInfo.style.display = 'block';
                        warmMealInfo.textContent = 'Invalid Selection: This location does not serve warm meals. Please select a different meal type.';
                        warmMealInfo.className = 'form-text text-danger';
                    } else {
                        warmMealInfo.style.display = 'block';
                        warmMealInfo.textContent = 'Valid Location: This location can serve warm evening meals.';
                        warmMealInfo.className = 'form-text text-success';
                    }
                } else {
                    warmMealInfo.style.display = 'none';
                }
            }

            mealTypeSelect.addEventListener('change', function() {
                checkWarmMealRestriction();
                
                // Update select color when option is selected
                if (mealTypeSelect.value && mealTypeSelect.value !== '') {
                    mealTypeSelect.style.color = 'var(--color-primary-dark)';
                } else {
                    mealTypeSelect.style.color = 'var(--color-text-muted)';
                }
            });
            
            // Check on page load
            checkWarmMealRestriction();
        });

        // Custom Calendar and Time Picker functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Calendar picker instances
            const pickers = {
                pickup: {
                    toggle: document.getElementById('pickupCalendarToggle'),
                    calendar: document.getElementById('pickupCustomCalendar'),
                    selectedSpan: document.getElementById('selectedPickupDatetime'),
                    input: document.getElementById('pickupTimeInput'),
                    currentMonth: document.getElementById('pickupCurrentMonth'),
                    calendarGrid: document.getElementById('pickupCalendarGrid'),
                    prevMonth: document.getElementById('pickupPrevMonth'),
                    nextMonth: document.getElementById('pickupNextMonth'),
                    hourInput: document.getElementById('pickupHourInput'),
                    minuteInput: document.getElementById('pickupMinuteInput'),
                    currentDate: new Date(),
                    selectedDate: null,
                    hour: 12,
                    minute: 0
                },
                latest: {
                    toggle: document.getElementById('latestCalendarToggle'),
                    calendar: document.getElementById('latestCustomCalendar'),
                    selectedSpan: document.getElementById('selectedLatestDatetime'),
                    input: document.getElementById('latestPickupTimeInput'),
                    currentMonth: document.getElementById('latestCurrentMonth'),
                    calendarGrid: document.getElementById('latestCalendarGrid'),
                    prevMonth: document.getElementById('latestPrevMonth'),
                    nextMonth: document.getElementById('latestNextMonth'),
                    hourInput: document.getElementById('latestHourInput'),
                    minuteInput: document.getElementById('latestMinuteInput'),
                    currentDate: new Date(),
                    selectedDate: null,
                    hour: 14,
                    minute: 0
                }
            };

            const months = ['January', 'February', 'March', 'April', 'May', 'June',
                           'July', 'August', 'September', 'October', 'November', 'December'];

            function formatDateTime(date, hour, minute) {
                const day = date.getDate().toString().padStart(2, '0');
                const month = (date.getMonth() + 1).toString().padStart(2, '0');
                const year = date.getFullYear();
                const hourStr = hour.toString().padStart(2, '0');
                const minuteStr = minute.toString().padStart(2, '0');
                return `${year}-${month}-${day}T${hourStr}:${minuteStr}`;
            }

            function formatDisplayDateTime(date, hour, minute) {
                const day = date.getDate();
                const monthName = months[date.getMonth()];
                const year = date.getFullYear();
                const hourStr = hour.toString().padStart(2, '0');
                const minuteStr = minute.toString().padStart(2, '0');
                return `${day} ${monthName} ${year}, ${hourStr}:${minuteStr}`;
            }

            function parseDateTime(dateTimeString) {
                if (!dateTimeString) return null;
                const date = new Date(dateTimeString);
                return {
                    date: new Date(date.getFullYear(), date.getMonth(), date.getDate()),
                    hour: date.getHours(),
                    minute: Math.floor(date.getMinutes() / 15) * 15 // Round to nearest 15 minutes
                };
            }

            function generateCalendar(pickerData) {
                const { currentDate, calendarGrid, currentMonth, selectedDate } = pickerData;
                const year = currentDate.getFullYear();
                const month = currentDate.getMonth();
                
                const firstDay = new Date(year, month, 1);
                const lastDay = new Date(year, month + 1, 0);
                const startDate = new Date(firstDay);
                startDate.setDate(startDate.getDate() - firstDay.getDay());
                
                currentMonth.textContent = `${months[month]} ${year}`;
                calendarGrid.innerHTML = '';
                
                for (let i = 0; i < 42; i++) {
                    const date = new Date(startDate);
                    date.setDate(startDate.getDate() + i);
                    
                    const dayElement = document.createElement('div');
                    dayElement.className = 'calendar-day';
                    dayElement.textContent = date.getDate();
                    
                    if (date.getMonth() !== month) {
                        dayElement.classList.add('other-month');
                    }
                    
                    // Disable past dates
                    if (date < new Date().setHours(0, 0, 0, 0)) {
                        dayElement.classList.add('disabled');
                    }
                    
                    // Disable dates more than 2 days ahead
                    const twoDaysFromNow = new Date();
                    twoDaysFromNow.setDate(twoDaysFromNow.getDate() + 2);
                    if (date > twoDaysFromNow.setHours(23, 59, 59, 999)) {
                        dayElement.classList.add('disabled');
                    }
                    
                    if (date.toDateString() === new Date().toDateString()) {
                        dayElement.classList.add('today');
                    }
                    
                    if (selectedDate && date.toDateString() === selectedDate.toDateString()) {
                        dayElement.classList.add('selected');
                    }
                    
                    dayElement.addEventListener('click', function() {
                        if (dayElement.classList.contains('disabled')) return;
                        
                        pickerData.selectedDate = new Date(date);
                        updateDateTime(pickerData);
                        
                        // Regenerate calendar to update selected state
                        generateCalendar(pickerData);
                    });
                    
                    calendarGrid.appendChild(dayElement);
                }
            }

            function updateDateTime(pickerData) {
                const { selectedDate, hour, minute, input, selectedSpan, toggle, hourInput, minuteInput } = pickerData;
                if (!selectedDate) return;
                
                hourInput.value = hour.toString().padStart(2, '0');
                minuteInput.value = minute.toString().padStart(2, '0');
                
                input.value = formatDateTime(selectedDate, hour, minute);
                selectedSpan.textContent = formatDisplayDateTime(selectedDate, hour, minute);
                toggle.classList.add('has-selected-date');
            }

            // Time button functionality
            function setupTimeButtons(pickerType) {
                const pickerData = pickers[pickerType];
                const timeButtons = document.querySelectorAll(`[data-target^="${pickerType}"]`);
                
                timeButtons.forEach(button => {
                    button.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        
                        const target = this.getAttribute('data-target');
                        const isUp = this.classList.contains('time-up');
                        
                        if (target === `${pickerType}-hour`) {
                            if (isUp) {
                                pickerData.hour = (pickerData.hour + 1) % 24;
                            } else {
                                pickerData.hour = pickerData.hour === 0 ? 23 : pickerData.hour - 1;
                            }
                        } else if (target === `${pickerType}-minute`) {
                            if (isUp) {
                                pickerData.minute = (pickerData.minute + 15) % 60;
                            } else {
                                pickerData.minute = pickerData.minute === 0 ? 45 : pickerData.minute - 15;
                            }
                        }
                        
                        updateDateTime(pickerData);
                    });
                });
            }

            // Initialize both pickers
            Object.entries(pickers).forEach(([key, pickerData]) => {
                const { toggle, calendar, prevMonth, nextMonth } = pickerData;
                
                // Parse existing datetime values from model
                const existingPickupTime = '@Html.Raw(Model.PickupTime.ToString("yyyy-MM-ddTHH:mm"))';
                const existingLatestTime = '@Html.Raw(Model.LatestPickupTime.ToString("yyyy-MM-ddTHH:mm"))';
                
                let existingValue = null;
                if (key === 'pickup' && existingPickupTime && existingPickupTime !== '0001-01-01T00:00') {
                    existingValue = parseDateTime(existingPickupTime);
                } else if (key === 'latest' && existingLatestTime && existingLatestTime !== '0001-01-01T00:00') {
                    existingValue = parseDateTime(existingLatestTime);
                }
                
                if (existingValue) {
                    // Use existing values from model
                    pickerData.selectedDate = existingValue.date;
                    pickerData.hour = existingValue.hour;
                    pickerData.minute = existingValue.minute;
                } else {
                    // Set default to tomorrow
                    const defaultDate = new Date();
                    defaultDate.setDate(defaultDate.getDate() + 1);
                    pickerData.selectedDate = new Date(defaultDate);
                    
                    // Ensure time values are set
                    if (key === 'pickup') {
                        pickerData.hour = 12;
                        pickerData.minute = 0;
                    } else {
                        pickerData.hour = 14;
                        pickerData.minute = 0;
                    }
                }
                
                // Initialize datetime values
                updateDateTime(pickerData);
                
                // Setup time buttons
                setupTimeButtons(key);
                
                // Toggle calendar visibility
                toggle.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // Close other calendar
                    const otherPicker = key === 'pickup' ? pickers.latest : pickers.pickup;
                    otherPicker.calendar.classList.remove('show');
                    
                    calendar.classList.toggle('show');
                    if (calendar.classList.contains('show')) {
                        generateCalendar(pickerData);
                    }
                });
                
                // Month navigation
                prevMonth.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    pickerData.currentDate.setMonth(pickerData.currentDate.getMonth() - 1);
                    generateCalendar(pickerData);
                });
                
                nextMonth.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    pickerData.currentDate.setMonth(pickerData.currentDate.getMonth() + 1);
                    generateCalendar(pickerData);
                });
                
                // Generate initial calendar
                generateCalendar(pickerData);
            });
            
            // Close calendars when clicking outside
            document.addEventListener('click', function(e) {
                Object.values(pickers).forEach(pickerData => {
                    const { toggle, calendar } = pickerData;
                    if (!toggle.contains(e.target) && !calendar.contains(e.target)) {
                        calendar.classList.remove('show');
                    }
                });
            });
            
            // Form validation before submission
            document.querySelector('form').addEventListener('submit', function(e) {
                const pickupTime = document.getElementById('pickupTimeInput').value;
                const latestPickupTime = document.getElementById('latestPickupTimeInput').value;
                
                if (!pickupTime || !latestPickupTime) {
                    e.preventDefault();
                    alert('Please select both pickup times before submitting.');
                    return false;
                }
                
                // Validate that latest pickup time is after pickup time
                if (new Date(latestPickupTime) <= new Date(pickupTime)) {
                    e.preventDefault();
                    alert('Latest pickup time must be after the initial pickup time.');
                    return false;
                }
            });
        });
    </script>
}