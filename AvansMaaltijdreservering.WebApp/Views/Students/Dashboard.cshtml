@model AvansMaaltijdreservering.WebApp.ViewModels.Students.StudentDashboardViewModel
@{
    ViewData["Title"] = "Available Packages";
}

<div class="mt-4">

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @Html.AntiForgeryToken()
    
    <!-- Meal Type Filter Buttons -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="meal-type-filters">
                <button class="meal-filter-btn @(Model.FilterMealType == null ? "active" : "")" data-meal-type="">
                    üçΩÔ∏è All
                </button>
                <button class="meal-filter-btn @(Model.FilterMealType == AvansMaaltijdreservering.Core.Domain.Enums.MealType.Bread ? "active" : "")" data-meal-type="0">
                    üçû Bread
                </button>
                <button class="meal-filter-btn @(Model.FilterMealType == AvansMaaltijdreservering.Core.Domain.Enums.MealType.WarmEveningMeal ? "active" : "")" data-meal-type="1">
                    üçΩÔ∏è Warm Evening Meal
                </button>
                <button class="meal-filter-btn @(Model.FilterMealType == AvansMaaltijdreservering.Core.Domain.Enums.MealType.Drink ? "active" : "")" data-meal-type="2">
                    ü•§ Drink
                </button>
                <button class="meal-filter-btn @(Model.FilterMealType == AvansMaaltijdreservering.Core.Domain.Enums.MealType.Snack ? "active" : "")" data-meal-type="3">
                    üçø Snack
                </button>
                <button class="meal-filter-btn @(Model.FilterMealType == AvansMaaltijdreservering.Core.Domain.Enums.MealType.Lunch ? "active" : "")" data-meal-type="4">
                    ü•™ Lunch
                </button>
                <button class="meal-filter-btn @(Model.FilterMealType == AvansMaaltijdreservering.Core.Domain.Enums.MealType.Breakfast ? "active" : "")" data-meal-type="5">
                    ü•ê Breakfast
                </button>
            </div>
        </div>
    </div>

    <!-- Available Packages -->
    <div class="row mb-4">
        <div class="col-12">
            <h3 class="labrada-font">Available Packages (@Model.AvailablePackages.Count())</h3>
            <p class="text-muted mb-4 labrada-font">Showing packages for <strong>@(Model.FilterCity.ToString().Replace("BREDA", "Breda").Replace("TILBURG", "Tilburg").Replace("DENBOSCH", "Den Bosch"))</strong> @(Model.FilterMealType.HasValue ? $"‚Ä¢ {System.Text.RegularExpressions.Regex.Replace(Model.FilterMealType.ToString(), "([a-z])([A-Z])", "$1 $2")}" : "")</p>
        </div>
    </div>

    @if (!Model.AvailablePackages.Any())
    {
        <div class="row">
            <div class="col-12">
                <div class="text-center py-5">
                    <div class="display-1 text-muted mb-3">üçΩÔ∏è</div>
                    <h4 class="text-muted">No packages available</h4>
                    <p class="text-muted">Try adjusting your filters or check back later!</p>
                    <a asp-action="Dashboard" class="meal-filter-btn">
                        <i class="bi bi-arrow-clockwise"></i> Reset Filters
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var item in Model.AvailablePackages)
            {
                <div class="col-md-6 col-lg-4">
                    <div class="package-card">
                        <h3 class="package-card-title">@item.Package.Name</h3>
                        <div class="package-card-price">‚Ç¨@item.Package.Price.ToString("0.00")</div>
                        <div class="package-card-location">@item.Package.CanteenLocation.ToString().Replace("_", " ").Replace("BREDA", "Breda").Replace("TILBURG", "Tilburg").Replace("DENBOSCH", "Den Bosch").Replace("LA BUILDING", "LA Building").Replace("LD BUILDING", "LD Building").Replace("HA BUILDING", "HA Building")</div>
                        <div class="package-card-time">@item.Package.PickupTime.ToString("ddd dd MMM, HH:mm")</div>
                        
                        <div class="package-buttons">
                            @if (item.CanReserve)
                            {
                                <button type="button" class="btn-package-reserve" onclick="showReserveModal('@item.Package.Id', '@item.Package.Name')">
                                    Reserve
                                </button>
                                <a asp-action="PackageDetails" asp-route-id="@item.Package.Id" class="btn-package-details">
                                    Details
                                </a>
                            }
                            else
                            {
                                <span class="btn-package-unavailable">
                                    Cannot Reserve
                                    <div class="unavailable-tooltip">
                                        @(!string.IsNullOrEmpty(item.IneligibilityReason) ? item.IneligibilityReason : "Not eligible for reservation")
                                    </div>
                                </span>
                                <a asp-action="PackageDetails" asp-route-id="@item.Package.Id" class="btn-package-details">
                                    Details
                                </a>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Custom Reserve Modal -->
<div id="reserveModal" class="custom-modal-overlay">
    <div class="custom-modal">
        <h3 class="custom-modal-title">Reserve Package</h3>
        <p class="custom-modal-text">Are you sure you want to reserve <strong id="packageName"></strong>?</p>
        <div class="custom-modal-buttons">
            <button type="button" class="btn-modal-cancel" onclick="hideReserveModal()">Cancel</button>
            <button type="button" class="btn-modal-confirm" onclick="confirmReservation()">Reserve</button>
        </div>
    </div>
</div>

@section Scripts {
<script>
let currentPackageId = null;

function showReserveModal(packageId, packageName) {
    currentPackageId = packageId;
    document.getElementById('packageName').textContent = packageName;
    document.getElementById('reserveModal').classList.add('show');
    document.body.style.overflow = 'hidden';
}

function hideReserveModal() {
    document.getElementById('reserveModal').classList.remove('show');
    document.body.style.overflow = '';
    currentPackageId = null;
}

function confirmReservation() {
    if (currentPackageId) {
        // Create and submit form
        const form = document.createElement('form');
        form.method = 'post';
        form.action = '@Url.Action("ReservePackage", "Students")';
        
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'packageId';
        input.value = currentPackageId;
        
        // Add anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        if (token) {
            const tokenInput = document.createElement('input');
            tokenInput.type = 'hidden';
            tokenInput.name = '__RequestVerificationToken';
            tokenInput.value = token.value;
            form.appendChild(tokenInput);
        }
        
        form.appendChild(input);
        document.body.appendChild(form);
        form.submit();
    }
}

// Close modal when clicking outside
document.getElementById('reserveModal').addEventListener('click', function(e) {
    if (e.target === this) {
        hideReserveModal();
    }
});

// Close modal with Escape key
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        hideReserveModal();
    }
});

document.addEventListener('DOMContentLoaded', function() {
    const mealButtons = document.querySelectorAll('.meal-filter-btn');
    const currentCity = '@Model.FilterCity';
    
    mealButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Remove active class from all buttons
            mealButtons.forEach(btn => btn.classList.remove('active'));
            
            // Add active class to clicked button
            this.classList.add('active');
            
            // Get meal type value
            const mealType = this.getAttribute('data-meal-type');
            
            // Build URL with current city filter and new meal type
            let url = new URL(window.location.href);
            url.searchParams.set('filterCity', '@((int)Model.FilterCity)');
            
            if (mealType === '') {
                url.searchParams.delete('filterMealType');
            } else {
                url.searchParams.set('filterMealType', mealType);
            }
            
            // Navigate to filtered URL
            window.location.href = url.toString();
        });
    });
});
</script>
}