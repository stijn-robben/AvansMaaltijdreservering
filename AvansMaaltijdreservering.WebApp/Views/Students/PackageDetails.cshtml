@model AvansMaaltijdreservering.WebApp.ViewModels.Students.PackageDetailsViewModel
@{
    ViewData["Title"] = Model.Package.Name;
}

<div class="mt-4">
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @Html.AntiForgeryToken()

    <!-- Back to Dashboard -->
    <div class="row mb-4">
        <div class="col-12">
            <a asp-action="Dashboard" class="btn-package-details">
                <i class="bi bi-arrow-left"></i> Back to Dashboard
            </a>
        </div>
    </div>

    <!-- Package Details -->
    <div class="row mb-4">
        <!-- Left Column - Package Information (50%) -->
        <div class="col-md-6">
            <div class="package-details-card">
                <div class="package-details-header">
                    <h1 class="package-details-title labrada-font">@Model.Package.Name</h1>
                    <div class="package-details-price">â‚¬@Model.Package.Price.ToString("0.00")</div>
                </div>
                
                <div class="package-details-list">
                    <div class="package-detail-item">
                        <div class="package-detail-left">
                            <i class="bi bi-geo-alt"></i>
                            <span>Location</span>
                        </div>
                        <div class="package-detail-right">
                            @Model.Package.CanteenLocation.ToString().Replace("_", " ").Replace("BREDA", "Breda").Replace("TILBURG", "Tilburg").Replace("DENBOSCH", "Den Bosch").Replace("LA BUILDING", "LA Building").Replace("LD BUILDING", "LD Building").Replace("HA BUILDING", "HA Building")
                        </div>
                    </div>

                    <div class="package-detail-item">
                        <div class="package-detail-left">
                            <i class="bi bi-calendar"></i>
                            <span>Date</span>
                        </div>
                        <div class="package-detail-right">
                            @Model.Package.PickupTime.ToString("dddd, MMMM dd yyyy")
                        </div>
                    </div>

                    <div class="package-detail-item">
                        <div class="package-detail-left">
                            <i class="bi bi-clock"></i>
                            <span>Pickup Time</span>
                        </div>
                        <div class="package-detail-right package-detail-hoverable">
                            @Model.Package.PickupTime.ToString("HH:mm") - @Model.Package.LatestPickupTime.ToString("HH:mm") <i class="bi bi-info-circle pickup-time-info-icon"></i>
                            <div class="pickup-time-tooltip">
                                You can pick up the package from @Model.Package.PickupTime.ToString("HH:mm") until @Model.Package.LatestPickupTime.ToString("HH:mm"). If you don't pick up within this time window, you might get a no-show.
                            </div>
                        </div>
                    </div>

                    <div class="package-detail-item">
                        <div class="package-detail-left">
                            <i class="bi bi-map"></i>
                            <span>City</span>
                        </div>
                        <div class="package-detail-right">
                            @Model.Package.City.ToString().Replace("BREDA", "Breda").Replace("TILBURG", "Tilburg").Replace("DENBOSCH", "Den Bosch")
                        </div>
                    </div>

                    <div class="package-detail-item">
                        <div class="package-detail-left">
                            <i class="bi bi-tag"></i>
                            <span>Meal Type</span>
                        </div>
                        <div class="package-detail-right">
                            @switch (Model.Package.MealType)
                            {
                                case AvansMaaltijdreservering.Core.Domain.Enums.MealType.Bread:
                                    <text>Bread</text>
                                    break;
                                case AvansMaaltijdreservering.Core.Domain.Enums.MealType.WarmEveningMeal:
                                    <text>Warm Evening Meal</text>
                                    break;
                                case AvansMaaltijdreservering.Core.Domain.Enums.MealType.Drink:
                                    <text>Drink</text>
                                    break;
                                case AvansMaaltijdreservering.Core.Domain.Enums.MealType.Snack:
                                    <text>Snack</text>
                                    break;
                                case AvansMaaltijdreservering.Core.Domain.Enums.MealType.Lunch:
                                    <text>Lunch</text>
                                    break;
                                case AvansMaaltijdreservering.Core.Domain.Enums.MealType.Breakfast:
                                    <text>Breakfast</text>
                                    break;
                            }
                        </div>
                    </div>

                    @if (Model.Package.Products.Any())
                    {
                        <div class="package-detail-item package-detail-contents">
                            <div class="package-detail-left">
                                <i class="bi bi-box-seam"></i>
                                <span>Contents</span>
                            </div>
                            <div class="package-detail-right">
                                <div class="package-products">
                                    @foreach (var product in Model.Package.Products)
                                    {
                                        <div class="package-product">
                                            <span class="package-product-name">@product.Name</span>
                                            @if (product.ContainsAlcohol)
                                            {
                                                <i class="bi bi-exclamation-triangle-fill package-product-warning">
                                                    <div class="product-warning-tooltip">
                                                        Adults Only (18+) - This product contains alcohol
                                                    </div>
                                                </i>
                                            }
                                        </div>
                                    }
                                </div>
                                <p class="package-products-note">
                                    <small>Products shown are examples. Actual contents may vary - part of the surprise!</small>
                                </p>
                            </div>
                        </div>
                    }

                    @if (Model.Package.ContainsAlcohol())
                    {
                        <div class="package-detail-item package-detail-warning">
                            <div class="package-detail-left">
                                <i class="bi bi-exclamation-triangle-fill"></i>
                                <span>Age Restriction</span>
                            </div>
                            <div class="package-detail-right">
                                <span class="warning-text">Adults Only (18+) - This package contains alcohol</span>
                            </div>
                        </div>
                    }
                </div>

                <div class="package-details-buttons">
                    @if (!Model.IsAvailable)
                    {
                        <span class="btn-package-unavailable">
                            Already Reserved
                            <div class="unavailable-tooltip">
                                This package has been reserved by another student
                            </div>
                        </span>
                    }
                    else if (!Model.CanReserve)
                    {
                        <span class="btn-package-unavailable">
                            Cannot Reserve
                            <div class="unavailable-tooltip">
                                @if (Model.Package.ContainsAlcohol() && !Model.Student.IsAdultOnDate(Model.Package.PickupTime.Date))
                                {
                                    var ageOnPickup = Model.Student.GetAgeOnDate(Model.Package.PickupTime.Date);
                                    <text>You must be 18+ to reserve packages with alcohol. You'll be @ageOnPickup on pickup day.</text>
                                }
                                else if (Model.Student.HasReservationOnDate(Model.Package.PickupTime.Date))
                                {
                                    <text>You already have a reservation for this date. Only one package per day allowed.</text>
                                }
                                else if (Model.Student.IsBlocked())
                                {
                                    <text>Your account is blocked due to @Model.Student.NoShowCount no-shows. Contact support.</text>
                                }
                                else
                                {
                                    <text>This package cannot be reserved</text>
                                }
                            </div>
                        </span>
                    }
                    else
                    {
                        <button type="button" class="btn-package-reserve" onclick="showReserveModal('@Model.Package.Id', '@Model.Package.Name')">
                            Reserve
                        </button>
                    }
                </div>
            </div>
        </div>

        <!-- Right Column - Additional Information (50%) -->
        <div class="col-md-6">
            <div class="package-details-card">
                <h3 class="labrada-font">Additional Information</h3>
                <p class="text-muted">This section is reserved for future content.</p>
            </div>
        </div>
    </div>
</div>

<!-- Custom Reserve Modal -->
<div id="reserveModal" class="custom-modal-overlay">
    <div class="custom-modal">
        <h3 class="custom-modal-title">Reserve Package</h3>
        <p class="custom-modal-text">Are you sure you want to reserve <strong id="packageName">@Model.Package.Name</strong>?</p>
        <div class="custom-modal-buttons">
            <button type="button" class="btn-modal-cancel" onclick="hideReserveModal()">Cancel</button>
            <button type="button" class="btn-modal-confirm" onclick="confirmReservation()">Reserve</button>
        </div>
    </div>
</div>

@section Scripts {
<script>
let currentPackageId = '@Model.Package.Id';

function showReserveModal(packageId, packageName) {
    currentPackageId = packageId;
    document.getElementById('packageName').textContent = packageName;
    document.getElementById('reserveModal').classList.add('show');
    document.body.style.overflow = 'hidden';
}

function hideReserveModal() {
    document.getElementById('reserveModal').classList.remove('show');
    document.body.style.overflow = '';
}

function confirmReservation() {
    if (currentPackageId) {
        // Create and submit form
        const form = document.createElement('form');
        form.method = 'post';
        form.action = '@Url.Action("ReservePackage", "Students")';
        
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'packageId';
        input.value = currentPackageId;
        
        // Add anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        if (token) {
            const tokenInput = document.createElement('input');
            tokenInput.type = 'hidden';
            tokenInput.name = '__RequestVerificationToken';
            tokenInput.value = token.value;
            form.appendChild(tokenInput);
        }
        
        form.appendChild(input);
        document.body.appendChild(form);
        form.submit();
    }
}

// Close modal when clicking outside
document.getElementById('reserveModal').addEventListener('click', function(e) {
    if (e.target === this) {
        hideReserveModal();
    }
});

// Close modal with Escape key
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        hideReserveModal();
    }
});
</script>
}