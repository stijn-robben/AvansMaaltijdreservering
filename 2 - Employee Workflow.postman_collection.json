{
	"info": {
		"_postman_id": "9eba51d0-4854-4cd2-8e62-bbe0b14566be",
		"name": "2 - Employee Workflow",
		"description": "Complete employee workflow: registration, authentication, package management, business rule validation, and no-show management. Tests US_02, US_03, US_06, US_09, US_10 requirements. RUN AFTER Student Workflow.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26200282"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Employee registration successful', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"employee@test.com\",\n  \"password\": \"Test123!\",\n  \"role\": \"CanteenEmployee\",\n  \"employeeNumber\": \"EMP001\",\n  \"worksAtCanteen\": \"BREDA_LA_BUILDING\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/account/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"account",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Employee Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Employee login successful', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const response = pm.response.json();",
									"    pm.globals.set('employee_token', response.token);",
									"    pm.globals.set('employee_id', response.employeeId);",
									"    pm.expect(response.roles).to.include('CanteenEmployee');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"employee@test.com\",\n  \"password\": \"Test123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/account/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Employee authentication verified', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const userInfo = pm.response.json();",
									"    pm.expect(userInfo.roles).to.include('CanteenEmployee');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{employee_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/account/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"account",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product Management",
			"item": [
				{
					"name": "View All Products (US_06)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Products retrieved successfully', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const products = pm.response.json();",
									"    pm.expect(products.length).to.be.greaterThan(0);",
									"    ",
									"    // Store product IDs for package creation",
									"    const alcoholProduct = products.find(p => p.containsAlcohol);",
									"    const regularProduct = products.find(p => !p.containsAlcohol);",
									"    if (alcoholProduct) pm.globals.set('alcohol_product_id', alcoholProduct.id);",
									"    if (regularProduct) pm.globals.set('regular_product_id', regularProduct.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Specific Product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const productId = pm.globals.get('regular_product_id') || '1';",
									"pm.request.url.path[2] = productId;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Product details retrieved', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const product = pm.response.json();",
									"    pm.expect(product).to.have.property('name');",
									"    pm.expect(product).to.have.property('containsAlcohol');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Package Management (US_03)",
			"item": [
				{
					"name": "View Own Canteen Packages (US_02)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Own canteen packages retrieved', function () {",
									"    if (pm.response.code === 200) {",
									"        const packages = pm.response.json();",
									"        console.log('Own canteen packages: ' + packages.length);",
									"    } else if (pm.response.code === 401 || pm.response.code === 403) {",
									"        pm.expect([401, 403]).to.include(pm.response.code);",
									"        console.log('Authentication required for canteen view');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{employee_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/packages/my-canteen",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages",
								"my-canteen"
							]
						}
					},
					"response": []
				},
				{
					"name": "View All Available Packages (US_02)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('All packages retrieved', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const packages = pm.response.json();",
									"    console.log('Total available packages: ' + packages.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/packages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Regular Package",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate dynamic dates (tomorrow)",
									"const tomorrow = new Date();",
									"tomorrow.setDate(tomorrow.getDate() + 1);",
									"const pickupTime = tomorrow.getFullYear() + '-' + String(tomorrow.getMonth() + 1).padStart(2, '0') + '-' + String(tomorrow.getDate()).padStart(2, '0') + 'T12:30:00';",
									"const latestPickupTime = tomorrow.getFullYear() + '-' + String(tomorrow.getMonth() + 1).padStart(2, '0') + '-' + String(tomorrow.getDate()).padStart(2, '0') + 'T14:00:00';",
									"",
									"// Use actual product IDs",
									"const regularProductId = pm.globals.get('regular_product_id') || '1';",
									"const body = JSON.parse(pm.request.body.raw);",
									"body.productIds = [parseInt(regularProductId)];",
									"body.pickupTime = pickupTime;",
									"body.latestPickupTime = latestPickupTime;",
									"pm.request.body.raw = JSON.stringify(body, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Regular package created successfully', function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"    const package = pm.response.json();",
									"    pm.globals.set('created_package_id', package.id);",
									"    pm.expect(package.is18Plus).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{employee_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Lunch Package\",\n  \"city\": 0,\n  \"canteenLocation\": 0,\n  \"pickupTime\": \"PLACEHOLDER\",\n  \"latestPickupTime\": \"PLACEHOLDER\",\n  \"price\": 5.95,\n  \"mealType\": 0,\n  \"productIds\": [1]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/packages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 18+ Package (US_04)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use alcohol product ID",
									"const alcoholProductId = pm.globals.get('alcohol_product_id') || '4';",
									"const body = JSON.parse(pm.request.body.raw);",
									"body.productIds = [parseInt(alcoholProductId)];",
									"pm.request.body.raw = JSON.stringify(body, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('18+ package created with automatic marking', function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"    const package = pm.response.json();",
									"    pm.globals.set('adult_package_id', package.id);",
									"    pm.expect(package.is18Plus).to.be.true;",
									"    console.log('18+ package automatically marked due to alcohol content');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{employee_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Evening Wine Package\",\n  \"city\": 0,\n  \"canteenLocation\": 0,\n  \"pickupTime\": \"2025-08-29T18:00:00\",\n  \"latestPickupTime\": \"2025-08-29T19:30:00\",\n  \"price\": 15.95,\n  \"mealType\": 1,\n  \"productIds\": [4]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/packages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Package (Own Location Only)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate dynamic dates (tomorrow + 1 hour later than create)",
									"const tomorrow = new Date();",
									"tomorrow.setDate(tomorrow.getDate() + 1);",
									"const pickupTime = tomorrow.getFullYear() + '-' + String(tomorrow.getMonth() + 1).padStart(2, '0') + '-' + String(tomorrow.getDate()).padStart(2, '0') + 'T13:00:00';",
									"const latestPickupTime = tomorrow.getFullYear() + '-' + String(tomorrow.getMonth() + 1).padStart(2, '0') + '-' + String(tomorrow.getDate()).padStart(2, '0') + 'T14:30:00';",
									"",
									"const packageId = pm.globals.get('created_package_id') || '1';",
									"pm.request.url.path[2] = packageId;",
									"const body = JSON.parse(pm.request.body.raw);",
									"body.id = parseInt(packageId);",
									"body.pickupTime = pickupTime;",
									"body.latestPickupTime = latestPickupTime;",
									"pm.request.body.raw = JSON.stringify(body, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Package updated successfully', function () {",
									"    pm.expect(pm.response.code).to.eql(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{employee_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 1,\n  \"name\": \"Updated Test Lunch Package\",\n  \"city\": 0,\n  \"canteenLocation\": 0,\n  \"pickupTime\": \"PLACEHOLDER\",\n  \"latestPickupTime\": \"PLACEHOLDER\",\n  \"price\": 6.95,\n  \"mealType\": 0\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/packages/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Business Rules Testing",
			"item": [
				{
					"name": "Test Max 2 Days Ahead Rule",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate date 7 days ahead (should fail)",
									"const futureDate = new Date();",
									"futureDate.setDate(futureDate.getDate() + 7);",
									"const pickupTime = futureDate.getFullYear() + '-' + String(futureDate.getMonth() + 1).padStart(2, '0') + '-' + String(futureDate.getDate()).padStart(2, '0') + 'T12:00:00';",
									"const latestPickupTime = futureDate.getFullYear() + '-' + String(futureDate.getMonth() + 1).padStart(2, '0') + '-' + String(futureDate.getDate()).padStart(2, '0') + 'T14:00:00';",
									"",
									"const body = JSON.parse(pm.request.body.raw);",
									"body.pickupTime = pickupTime;",
									"body.latestPickupTime = latestPickupTime;",
									"pm.request.body.raw = JSON.stringify(body, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Future date validation enforced', function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"    const error = pm.response.json();",
									"    console.log('Correctly rejected package beyond 2-day limit');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{employee_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Future Package (Should Fail)\",\n  \"city\": 0,\n  \"canteenLocation\": 0,\n  \"pickupTime\": \"PLACEHOLDER\",\n  \"latestPickupTime\": \"PLACEHOLDER\",\n  \"price\": 5.95,\n  \"mealType\": 0,\n  \"productIds\": [1]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/packages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Price Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Price validation enforced', function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"    console.log('Correctly rejected package with invalid price');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{employee_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Free Package (Should Fail)\",\n  \"city\": 0,\n  \"canteenLocation\": 0,\n  \"pickupTime\": \"{{$isoTimestamp}}\",\n  \"latestPickupTime\": \"{{$isoTimestamp}}\",\n  \"price\": 0.00,\n  \"mealType\": 0,\n  \"productIds\": [1]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/packages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Warm Meal Restriction (US_09)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Warm meal restriction validation', function () {",
									"    if (pm.response.code === 400) {",
									"        console.log('Correctly enforced warm meal restriction');",
									"    } else if (pm.response.code === 201) {",
									"        console.log('Warm meal allowed at this location');",
									"    }",
									"    pm.expect([201, 400]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{employee_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Warm Meal Test\",\n  \"city\": 0,\n  \"canteenLocation\": 1,\n  \"pickupTime\": \"2025-08-28T17:30:00\",\n  \"latestPickupTime\": \"2025-08-28T19:00:00\",\n  \"price\": 8.50,\n  \"mealType\": 1,\n  \"productIds\": [1]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/packages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "No-Show Management (US_10)",
			"item": [
				{
					"name": "Register No-Show for Reserved Package",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('No-show registered successfully (US_10)', function () {",
									"    if (pm.response.code === 400 && pm.response.json().message.includes('no reservation')) {",
									"        console.log('⚠️  Package 1 has no reservation - run Student Workflow first to create reservations');",
									"        pm.expect(pm.response.code).to.eql(400);",
									"    } else {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"        const response = pm.response.json();",
									"        pm.expect(response.message).to.include('No-show registered successfully');",
									"        console.log('✅ No-show registered - package released and student no-show count incremented');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{employee_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/reservations/1/no-show",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations",
								"1",
								"no-show"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test No-Show on Non-Reserved Package",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cannot register no-show on non-reserved package', function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"    const error = pm.response.json();",
									"    console.log('🚫 Correctly prevented no-show on non-reserved package');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{employee_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/reservations/999/no-show",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations",
								"999",
								"no-show"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Unauthorized No-Show Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Students cannot register no-shows', function () {",
									"    pm.expect([401, 403]).to.include(pm.response.code);",
									"    console.log('🚫 Correctly blocked student from registering no-show');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/reservations/1/no-show",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reservations",
								"1",
								"no-show"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authorization Testing",
			"item": [
				{
					"name": "Test Unauthorized Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthorized access properly blocked', function () {",
									"    pm.expect([401, 403]).to.include(pm.response.code);",
									"    console.log('Correctly blocked unauthorized package creation');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Unauthorized Package\",\n  \"city\": 0,\n  \"canteenLocation\": 0,\n  \"pickupTime\": \"2025-08-28T12:00:00\",\n  \"latestPickupTime\": \"2025-08-28T13:00:00\",\n  \"price\": 5.95,\n  \"mealType\": 0,\n  \"productIds\": [1]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/packages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"packages"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5080",
			"type": "string"
		}
	]
}